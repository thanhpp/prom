// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/thanhpp/prom/pkg/usrmanrpc/usrmanEntity.proto

package entity

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	timerpc "github.com/thanhpp/prom/pkg/timerpc"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type User struct {
	ID        uint32        `protobuf:"varint,1,opt,name=ID,proto3" json:"id" gorm:"Column:id; Type:int; primaryKey; autoIncrement"`
	Username  string        `protobuf:"bytes,2,opt,name=Username,proto3" json:"username" gorm:"Column:username; Type:text; unique"`
	HashPass  string        `protobuf:"bytes,3,opt,name=HashPass,proto3" json:"hash_pass" gorm:"Column:hash_pass; Type:text"`
	CreatedAt *timerpc.Time `protobuf:"bytes,4,opt,name=CreatedAt,proto3" json:"created_at" gorm:"Column:created_at"`
	UpdatedAt *timerpc.Time `protobuf:"bytes,5,opt,name=UpdatedAt,proto3" json:"updated_at" gorm:"Column:updated_at"`
	DeletedAt *timerpc.Time `protobuf:"bytes,6,opt,name=DeletedAt,proto3" json:"deleted_at" gorm:"Column:deleted_at"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_87ab214887f9dd7c, []int{0}
}
func (m *User) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_User.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return m.Size()
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetHashPass() string {
	if m != nil {
		return m.HashPass
	}
	return ""
}

func (m *User) GetCreatedAt() *timerpc.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *User) GetUpdatedAt() *timerpc.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *User) GetDeletedAt() *timerpc.Time {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

type Team struct {
	ID        uint32        `protobuf:"varint,1,opt,name=ID,proto3" json:"id" gorm:"Column:id; Type:int; primaryKey; autoIncrement"`
	Name      string        `protobuf:"bytes,2,opt,name=Name,proto3" json:"name" gorm:"Column:name; Type:text"`
	Members   []*User       `protobuf:"bytes,3,rep,name=Members,proto3" json:"members" gorm:"many2many:team_user"`
	Projects  []*Project    `protobuf:"bytes,4,rep,name=Projects,proto3" json:"projects" gorm:"foreignKey:TeamID "`
	CreatorID uint32        `protobuf:"varint,5,opt,name=CreatorID,proto3" json:"creator_id" gorm:"Column:creator_id; Type:int"`
	CreatedAt *timerpc.Time `protobuf:"bytes,6,opt,name=CreatedAt,proto3" json:"created_at" gorm:"Column:created_at"`
	UpdatedAt *timerpc.Time `protobuf:"bytes,7,opt,name=UpdatedAt,proto3" json:"updated_at" gorm:"Column:updated_at"`
	DeletedAt *timerpc.Time `protobuf:"bytes,8,opt,name=DeletedAt,proto3" json:"deleted_at" gorm:"Column:deleted_at"`
}

func (m *Team) Reset()         { *m = Team{} }
func (m *Team) String() string { return proto.CompactTextString(m) }
func (*Team) ProtoMessage()    {}
func (*Team) Descriptor() ([]byte, []int) {
	return fileDescriptor_87ab214887f9dd7c, []int{1}
}
func (m *Team) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Team) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Team.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Team) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Team.Merge(m, src)
}
func (m *Team) XXX_Size() int {
	return m.Size()
}
func (m *Team) XXX_DiscardUnknown() {
	xxx_messageInfo_Team.DiscardUnknown(m)
}

var xxx_messageInfo_Team proto.InternalMessageInfo

func (m *Team) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Team) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Team) GetMembers() []*User {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Team) GetProjects() []*Project {
	if m != nil {
		return m.Projects
	}
	return nil
}

func (m *Team) GetCreatorID() uint32 {
	if m != nil {
		return m.CreatorID
	}
	return 0
}

func (m *Team) GetCreatedAt() *timerpc.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Team) GetUpdatedAt() *timerpc.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Team) GetDeletedAt() *timerpc.Time {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

type Project struct {
	ID        uint32        `protobuf:"varint,1,opt,name=ID,proto3" json:"id" gorm:"Column:id; Type:int; primaryKey; autoIncrement"`
	Name      string        `protobuf:"bytes,2,opt,name=Name,proto3" json:"name" gorm:"Column:name; Type:text"`
	CreatedBy uint32        `protobuf:"varint,3,opt,name=CreatedBy,proto3" json:"created_by" gorm:"Column:created_by; Type:int"`
	TeamID    uint32        `protobuf:"varint,4,opt,name=TeamID,proto3" json:"team_id" gorm:"Column:team_id; Type:int"`
	CreatorID uint32        `protobuf:"varint,5,opt,name=CreatorID,proto3" json:"creator_id" gorm:"Column:creator_id; Type:int"`
	CreatedAt *timerpc.Time `protobuf:"bytes,6,opt,name=CreatedAt,proto3" json:"created_at" gorm:"Column:created_at"`
	UpdatedAt *timerpc.Time `protobuf:"bytes,7,opt,name=UpdatedAt,proto3" json:"updated_at" gorm:"Column:updated_at"`
	DeletedAt *timerpc.Time `protobuf:"bytes,8,opt,name=DeletedAt,proto3" json:"deleted_at" gorm:"Column:deleted_at"`
}

func (m *Project) Reset()         { *m = Project{} }
func (m *Project) String() string { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()    {}
func (*Project) Descriptor() ([]byte, []int) {
	return fileDescriptor_87ab214887f9dd7c, []int{2}
}
func (m *Project) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Project) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Project.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Project) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Project.Merge(m, src)
}
func (m *Project) XXX_Size() int {
	return m.Size()
}
func (m *Project) XXX_DiscardUnknown() {
	xxx_messageInfo_Project.DiscardUnknown(m)
}

var xxx_messageInfo_Project proto.InternalMessageInfo

func (m *Project) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Project) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Project) GetCreatedBy() uint32 {
	if m != nil {
		return m.CreatedBy
	}
	return 0
}

func (m *Project) GetTeamID() uint32 {
	if m != nil {
		return m.TeamID
	}
	return 0
}

func (m *Project) GetCreatorID() uint32 {
	if m != nil {
		return m.CreatorID
	}
	return 0
}

func (m *Project) GetCreatedAt() *timerpc.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Project) GetUpdatedAt() *timerpc.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Project) GetDeletedAt() *timerpc.Time {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "usrmanrpc.User")
	proto.RegisterType((*Team)(nil), "usrmanrpc.Team")
	proto.RegisterType((*Project)(nil), "usrmanrpc.Project")
}

func init() {
	proto.RegisterFile("github.com/thanhpp/prom/pkg/usrmanrpc/usrmanEntity.proto", fileDescriptor_87ab214887f9dd7c)
}

var fileDescriptor_87ab214887f9dd7c = []byte{
	// 705 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x96, 0x3f, 0x6f, 0xd3, 0x4e,
	0x18, 0xc7, 0xe3, 0xd4, 0xcd, 0x1f, 0x57, 0xd1, 0x4f, 0xf2, 0x94, 0x5f, 0x25, 0x6c, 0xeb, 0xa6,
	0x14, 0x09, 0x5b, 0x6a, 0x8b, 0x04, 0x89, 0x10, 0xc2, 0x0d, 0x88, 0xa8, 0x82, 0x56, 0x56, 0x2a,
	0x04, 0x4b, 0x74, 0x89, 0xaf, 0x89, 0xa1, 0xe7, 0x33, 0xe7, 0xb3, 0x84, 0xdf, 0x02, 0x13, 0x03,
	0xaf, 0x01, 0xf1, 0x12, 0x18, 0x19, 0x19, 0x3b, 0x32, 0x59, 0x6d, 0xba, 0x65, 0x42, 0x99, 0x18,
	0x91, 0xcf, 0x57, 0x3b, 0xa1, 0x2d, 0x53, 0x2b, 0x31, 0xb0, 0x24, 0xb6, 0xbf, 0xcf, 0x7d, 0x4e,
	0x79, 0x9e, 0x4f, 0x6c, 0x2b, 0xf7, 0xc6, 0x1e, 0x9b, 0x44, 0x43, 0x73, 0x44, 0xb0, 0xc5, 0x26,
	0xd0, 0x9f, 0x04, 0x81, 0x15, 0x50, 0x82, 0xad, 0xe0, 0xcd, 0xd8, 0x8a, 0x42, 0x8a, 0xa1, 0x4f,
	0x83, 0x91, 0x38, 0x7a, 0xec, 0x33, 0x8f, 0xc5, 0x66, 0x40, 0x09, 0x23, 0x6a, 0x3d, 0x4f, 0xd7,
	0xef, 0x2c, 0x40, 0xc6, 0x64, 0x4c, 0x2c, 0x5e, 0x31, 0x8c, 0x0e, 0xf9, 0x19, 0x3f, 0xe1, 0x47,
	0xd9, 0xca, 0x75, 0xf3, 0x4f, 0x7b, 0x32, 0x0f, 0xa3, 0x74, 0xc7, 0xf4, 0x3b, 0xab, 0x07, 0xef,
	0x65, 0x45, 0x3e, 0x08, 0x11, 0x55, 0xf7, 0x94, 0x72, 0xaf, 0xdb, 0x94, 0x0c, 0xa9, 0xd5, 0xb0,
	0x1f, 0xce, 0x12, 0xbd, 0xec, 0xb9, 0xf3, 0x44, 0xbf, 0x3b, 0x26, 0x14, 0xb7, 0xc1, 0x0e, 0x39,
	0x8a, 0xb0, 0xdf, 0xf6, 0xdc, 0x8e, 0xd1, 0x8f, 0x03, 0xd4, 0xf6, 0x7c, 0xd6, 0x31, 0x02, 0xea,
	0x61, 0x48, 0xe3, 0x5d, 0x14, 0x77, 0x0c, 0x18, 0x31, 0xd2, 0xf3, 0x47, 0x14, 0x61, 0xe4, 0x33,
	0xe0, 0x94, 0x7b, 0x5d, 0xf5, 0x40, 0xa9, 0xa5, 0x60, 0x1f, 0x62, 0xd4, 0x2c, 0x1b, 0x52, 0xab,
	0x6e, 0xdf, 0x9f, 0x25, 0x7a, 0x2d, 0x12, 0xd7, 0xe6, 0x89, 0xbe, 0xb1, 0x04, 0x3f, 0x0f, 0xc4,
	0x16, 0x0c, 0xbd, 0x63, 0x1d, 0x23, 0xf2, 0xbd, 0xb7, 0x11, 0x02, 0x4e, 0x8e, 0x52, 0xf7, 0x94,
	0xda, 0x53, 0x18, 0x4e, 0xf6, 0x61, 0x18, 0x36, 0x57, 0x38, 0x76, 0x6b, 0x96, 0xe8, 0xf5, 0x09,
	0x0c, 0x27, 0x83, 0x00, 0x86, 0xe1, 0x3c, 0xd1, 0xc1, 0x12, 0x37, 0x4f, 0x16, 0xc0, 0xc0, 0xc9,
	0x21, 0xea, 0x0b, 0xa5, 0xbe, 0x43, 0x11, 0x64, 0xc8, 0x7d, 0xc4, 0x9a, 0xb2, 0x21, 0xb5, 0xd6,
	0x36, 0x1b, 0xa6, 0xe8, 0x94, 0xd9, 0xf7, 0x30, 0xb2, 0x6f, 0xcf, 0x12, 0x5d, 0x19, 0x65, 0x35,
	0x03, 0xc8, 0xe6, 0x89, 0xde, 0x5c, 0xda, 0xa1, 0x88, 0x80, 0x53, 0xb0, 0x52, 0xf0, 0x41, 0xe0,
	0x0a, 0xf0, 0xea, 0x95, 0xe0, 0x28, 0xab, 0xb9, 0x0c, 0x5c, 0x44, 0xc0, 0x29, 0x58, 0x29, 0xb8,
	0x8b, 0x8e, 0x50, 0x06, 0xae, 0x5c, 0x09, 0x76, 0xb3, 0x9a, 0xcb, 0xc0, 0x45, 0x04, 0x9c, 0x82,
	0x05, 0x3e, 0xad, 0x2a, 0x72, 0x1f, 0x41, 0x7c, 0xfd, 0x32, 0x3c, 0x50, 0xe4, 0xe7, 0x85, 0x08,
	0x1b, 0xb3, 0x44, 0x97, 0x85, 0x04, 0xb7, 0x96, 0xa0, 0xbf, 0x09, 0x00, 0x1c, 0xbe, 0x4c, 0xed,
	0x2b, 0xd5, 0x67, 0x08, 0x0f, 0x11, 0x4d, 0x67, 0xbe, 0xd2, 0x5a, 0xdb, 0xfc, 0xcf, 0xcc, 0xff,
	0x21, 0x66, 0xaa, 0x06, 0x47, 0x56, 0x71, 0x56, 0x33, 0x4f, 0xf4, 0xf5, 0x8c, 0x8a, 0xa1, 0x1f,
	0x6f, 0xa6, 0x1f, 0x6d, 0x86, 0x20, 0x1e, 0xa4, 0x8a, 0x01, 0xe7, 0x1c, 0xa5, 0xbe, 0x54, 0x6a,
	0xfb, 0x94, 0xbc, 0x46, 0x23, 0x16, 0x36, 0x65, 0x8e, 0x55, 0x17, 0xb0, 0x22, 0xe2, 0xe4, 0x5a,
	0x20, 0xea, 0xe6, 0x89, 0xfe, 0x7f, 0x86, 0x3e, 0x24, 0x14, 0x79, 0x63, 0x7f, 0x17, 0xc5, 0xed,
	0xb4, 0x65, 0xbd, 0xae, 0x01, 0x9c, 0x1c, 0xa7, 0x3a, 0x42, 0x2a, 0x42, 0x7b, 0x5d, 0x3e, 0xfb,
	0x86, 0xbd, 0x9d, 0x5b, 0x44, 0xe8, 0x80, 0xf7, 0x13, 0x5c, 0xb4, 0x88, 0x47, 0x45, 0x5f, 0xcf,
	0x7d, 0x4a, 0x31, 0xcb, 0xa2, 0x56, 0x6e, 0x4a, 0xd4, 0xea, 0x4d, 0x89, 0x5a, 0xbb, 0x46, 0x51,
	0x3f, 0xae, 0x2a, 0x55, 0xd1, 0xeb, 0xbf, 0xce, 0x55, 0x27, 0x1f, 0x93, 0x1d, 0xf3, 0x3b, 0xd4,
	0xe2, 0xe8, 0x91, 0x3b, 0x18, 0xc6, 0x97, 0x8f, 0x9e, 0x47, 0x17, 0x47, 0x9f, 0x62, 0xd4, 0x27,
	0x4a, 0x25, 0x93, 0x8c, 0xdf, 0xa0, 0x1a, 0xb6, 0x99, 0xda, 0xce, 0x95, 0xe6, 0x3f, 0x56, 0x5f,
	0xa2, 0x89, 0xeb, 0x8b, 0x28, 0xb1, 0xfa, 0x9f, 0x96, 0x37, 0xaa, 0xa5, 0x7d, 0x78, 0x72, 0xaa,
	0x49, 0x3f, 0x4e, 0x35, 0xe9, 0xe7, 0xa9, 0x26, 0x7d, 0x9e, 0x6a, 0xd2, 0x97, 0xa9, 0x26, 0x7d,
	0x9d, 0x6a, 0xa5, 0x6f, 0x53, 0x4d, 0x3a, 0x9e, 0x6a, 0xd2, 0xc9, 0x54, 0x93, 0x3e, 0x9c, 0x69,
	0xa5, 0xe3, 0x33, 0xad, 0xf4, 0xfd, 0x4c, 0x2b, 0xbd, 0xda, 0xbe, 0xea, 0x71, 0x3d, 0xc2, 0xae,
	0x78, 0x31, 0xb0, 0x28, 0x0a, 0x48, 0xe8, 0x31, 0x42, 0x63, 0x0b, 0xf1, 0x97, 0x84, 0x61, 0x85,
	0x3f, 0xbb, 0xb7, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0xff, 0x4a, 0x1a, 0xdf, 0x61, 0x08, 0x00,
	0x00,
}

func (this *User) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*User)
	if !ok {
		that2, ok := that.(User)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *User")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *User but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *User but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.Username != that1.Username {
		return fmt.Errorf("Username this(%v) Not Equal that(%v)", this.Username, that1.Username)
	}
	if this.HashPass != that1.HashPass {
		return fmt.Errorf("HashPass this(%v) Not Equal that(%v)", this.HashPass, that1.HashPass)
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	if !this.DeletedAt.Equal(that1.DeletedAt) {
		return fmt.Errorf("DeletedAt this(%v) Not Equal that(%v)", this.DeletedAt, that1.DeletedAt)
	}
	return nil
}
func (this *User) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*User)
	if !ok {
		that2, ok := that.(User)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Username != that1.Username {
		return false
	}
	if this.HashPass != that1.HashPass {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !this.DeletedAt.Equal(that1.DeletedAt) {
		return false
	}
	return true
}
func (this *Team) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Team)
	if !ok {
		that2, ok := that.(Team)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Team")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Team but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Team but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if len(this.Members) != len(that1.Members) {
		return fmt.Errorf("Members this(%v) Not Equal that(%v)", len(this.Members), len(that1.Members))
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return fmt.Errorf("Members this[%v](%v) Not Equal that[%v](%v)", i, this.Members[i], i, that1.Members[i])
		}
	}
	if len(this.Projects) != len(that1.Projects) {
		return fmt.Errorf("Projects this(%v) Not Equal that(%v)", len(this.Projects), len(that1.Projects))
	}
	for i := range this.Projects {
		if !this.Projects[i].Equal(that1.Projects[i]) {
			return fmt.Errorf("Projects this[%v](%v) Not Equal that[%v](%v)", i, this.Projects[i], i, that1.Projects[i])
		}
	}
	if this.CreatorID != that1.CreatorID {
		return fmt.Errorf("CreatorID this(%v) Not Equal that(%v)", this.CreatorID, that1.CreatorID)
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	if !this.DeletedAt.Equal(that1.DeletedAt) {
		return fmt.Errorf("DeletedAt this(%v) Not Equal that(%v)", this.DeletedAt, that1.DeletedAt)
	}
	return nil
}
func (this *Team) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Team)
	if !ok {
		that2, ok := that.(Team)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if len(this.Members) != len(that1.Members) {
		return false
	}
	for i := range this.Members {
		if !this.Members[i].Equal(that1.Members[i]) {
			return false
		}
	}
	if len(this.Projects) != len(that1.Projects) {
		return false
	}
	for i := range this.Projects {
		if !this.Projects[i].Equal(that1.Projects[i]) {
			return false
		}
	}
	if this.CreatorID != that1.CreatorID {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !this.DeletedAt.Equal(that1.DeletedAt) {
		return false
	}
	return true
}
func (this *Project) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Project)
	if !ok {
		that2, ok := that.(Project)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Project")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Project but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Project but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.Name != that1.Name {
		return fmt.Errorf("Name this(%v) Not Equal that(%v)", this.Name, that1.Name)
	}
	if this.CreatedBy != that1.CreatedBy {
		return fmt.Errorf("CreatedBy this(%v) Not Equal that(%v)", this.CreatedBy, that1.CreatedBy)
	}
	if this.TeamID != that1.TeamID {
		return fmt.Errorf("TeamID this(%v) Not Equal that(%v)", this.TeamID, that1.TeamID)
	}
	if this.CreatorID != that1.CreatorID {
		return fmt.Errorf("CreatorID this(%v) Not Equal that(%v)", this.CreatorID, that1.CreatorID)
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	if !this.DeletedAt.Equal(that1.DeletedAt) {
		return fmt.Errorf("DeletedAt this(%v) Not Equal that(%v)", this.DeletedAt, that1.DeletedAt)
	}
	return nil
}
func (this *Project) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Project)
	if !ok {
		that2, ok := that.(Project)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.CreatedBy != that1.CreatedBy {
		return false
	}
	if this.TeamID != that1.TeamID {
		return false
	}
	if this.CreatorID != that1.CreatorID {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !this.DeletedAt.Equal(that1.DeletedAt) {
		return false
	}
	return true
}
func (this *User) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&entity.User{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Username: "+fmt.Sprintf("%#v", this.Username)+",\n")
	s = append(s, "HashPass: "+fmt.Sprintf("%#v", this.HashPass)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.DeletedAt != nil {
		s = append(s, "DeletedAt: "+fmt.Sprintf("%#v", this.DeletedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Team) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&entity.Team{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	if this.Members != nil {
		s = append(s, "Members: "+fmt.Sprintf("%#v", this.Members)+",\n")
	}
	if this.Projects != nil {
		s = append(s, "Projects: "+fmt.Sprintf("%#v", this.Projects)+",\n")
	}
	s = append(s, "CreatorID: "+fmt.Sprintf("%#v", this.CreatorID)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.DeletedAt != nil {
		s = append(s, "DeletedAt: "+fmt.Sprintf("%#v", this.DeletedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Project) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&entity.Project{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "CreatedBy: "+fmt.Sprintf("%#v", this.CreatedBy)+",\n")
	s = append(s, "TeamID: "+fmt.Sprintf("%#v", this.TeamID)+",\n")
	s = append(s, "CreatorID: "+fmt.Sprintf("%#v", this.CreatorID)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.DeletedAt != nil {
		s = append(s, "DeletedAt: "+fmt.Sprintf("%#v", this.DeletedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringUsrmanEntity(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *User) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *User) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *User) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeletedAt != nil {
		{
			size, err := m.DeletedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsrmanEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsrmanEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsrmanEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.HashPass) > 0 {
		i -= len(m.HashPass)
		copy(dAtA[i:], m.HashPass)
		i = encodeVarintUsrmanEntity(dAtA, i, uint64(len(m.HashPass)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintUsrmanEntity(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintUsrmanEntity(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Team) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Team) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Team) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeletedAt != nil {
		{
			size, err := m.DeletedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsrmanEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsrmanEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsrmanEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.CreatorID != 0 {
		i = encodeVarintUsrmanEntity(dAtA, i, uint64(m.CreatorID))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Projects) > 0 {
		for iNdEx := len(m.Projects) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Projects[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsrmanEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUsrmanEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUsrmanEntity(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintUsrmanEntity(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Project) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Project) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Project) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeletedAt != nil {
		{
			size, err := m.DeletedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsrmanEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsrmanEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintUsrmanEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.CreatorID != 0 {
		i = encodeVarintUsrmanEntity(dAtA, i, uint64(m.CreatorID))
		i--
		dAtA[i] = 0x28
	}
	if m.TeamID != 0 {
		i = encodeVarintUsrmanEntity(dAtA, i, uint64(m.TeamID))
		i--
		dAtA[i] = 0x20
	}
	if m.CreatedBy != 0 {
		i = encodeVarintUsrmanEntity(dAtA, i, uint64(m.CreatedBy))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUsrmanEntity(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintUsrmanEntity(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintUsrmanEntity(dAtA []byte, offset int, v uint64) int {
	offset -= sovUsrmanEntity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedUser(r randyUsrmanEntity, easy bool) *User {
	this := &User{}
	this.ID = uint32(r.Uint32())
	this.Username = string(randStringUsrmanEntity(r))
	this.HashPass = string(randStringUsrmanEntity(r))
	if r.Intn(5) != 0 {
		this.CreatedAt = timerpc.NewPopulatedTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.UpdatedAt = timerpc.NewPopulatedTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.DeletedAt = timerpc.NewPopulatedTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTeam(r randyUsrmanEntity, easy bool) *Team {
	this := &Team{}
	this.ID = uint32(r.Uint32())
	this.Name = string(randStringUsrmanEntity(r))
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.Members = make([]*User, v1)
		for i := 0; i < v1; i++ {
			this.Members[i] = NewPopulatedUser(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v2 := r.Intn(5)
		this.Projects = make([]*Project, v2)
		for i := 0; i < v2; i++ {
			this.Projects[i] = NewPopulatedProject(r, easy)
		}
	}
	this.CreatorID = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		this.CreatedAt = timerpc.NewPopulatedTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.UpdatedAt = timerpc.NewPopulatedTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.DeletedAt = timerpc.NewPopulatedTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedProject(r randyUsrmanEntity, easy bool) *Project {
	this := &Project{}
	this.ID = uint32(r.Uint32())
	this.Name = string(randStringUsrmanEntity(r))
	this.CreatedBy = uint32(r.Uint32())
	this.TeamID = uint32(r.Uint32())
	this.CreatorID = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		this.CreatedAt = timerpc.NewPopulatedTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.UpdatedAt = timerpc.NewPopulatedTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.DeletedAt = timerpc.NewPopulatedTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyUsrmanEntity interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneUsrmanEntity(r randyUsrmanEntity) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringUsrmanEntity(r randyUsrmanEntity) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneUsrmanEntity(r)
	}
	return string(tmps)
}
func randUnrecognizedUsrmanEntity(r randyUsrmanEntity, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldUsrmanEntity(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldUsrmanEntity(dAtA []byte, r randyUsrmanEntity, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateUsrmanEntity(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateUsrmanEntity(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateUsrmanEntity(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateUsrmanEntity(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateUsrmanEntity(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateUsrmanEntity(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateUsrmanEntity(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *User) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovUsrmanEntity(uint64(m.ID))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovUsrmanEntity(uint64(l))
	}
	l = len(m.HashPass)
	if l > 0 {
		n += 1 + l + sovUsrmanEntity(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovUsrmanEntity(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovUsrmanEntity(uint64(l))
	}
	if m.DeletedAt != nil {
		l = m.DeletedAt.Size()
		n += 1 + l + sovUsrmanEntity(uint64(l))
	}
	return n
}

func (m *Team) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovUsrmanEntity(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUsrmanEntity(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovUsrmanEntity(uint64(l))
		}
	}
	if len(m.Projects) > 0 {
		for _, e := range m.Projects {
			l = e.Size()
			n += 1 + l + sovUsrmanEntity(uint64(l))
		}
	}
	if m.CreatorID != 0 {
		n += 1 + sovUsrmanEntity(uint64(m.CreatorID))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovUsrmanEntity(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovUsrmanEntity(uint64(l))
	}
	if m.DeletedAt != nil {
		l = m.DeletedAt.Size()
		n += 1 + l + sovUsrmanEntity(uint64(l))
	}
	return n
}

func (m *Project) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovUsrmanEntity(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUsrmanEntity(uint64(l))
	}
	if m.CreatedBy != 0 {
		n += 1 + sovUsrmanEntity(uint64(m.CreatedBy))
	}
	if m.TeamID != 0 {
		n += 1 + sovUsrmanEntity(uint64(m.TeamID))
	}
	if m.CreatorID != 0 {
		n += 1 + sovUsrmanEntity(uint64(m.CreatorID))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovUsrmanEntity(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovUsrmanEntity(uint64(l))
	}
	if m.DeletedAt != nil {
		l = m.DeletedAt.Size()
		n += 1 + l + sovUsrmanEntity(uint64(l))
	}
	return n
}

func sovUsrmanEntity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUsrmanEntity(x uint64) (n int) {
	return sovUsrmanEntity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *User) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsrmanEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: User: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: User: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsrmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsrmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashPass", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsrmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashPass = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsrmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &timerpc.Time{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsrmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &timerpc.Time{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsrmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedAt == nil {
				m.DeletedAt = &timerpc.Time{}
			}
			if err := m.DeletedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsrmanEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Team) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsrmanEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Team: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Team: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsrmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsrmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsrmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &User{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Projects", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsrmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Projects = append(m.Projects, &Project{})
			if err := m.Projects[len(m.Projects)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorID", wireType)
			}
			m.CreatorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsrmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsrmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &timerpc.Time{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsrmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &timerpc.Time{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsrmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedAt == nil {
				m.DeletedAt = &timerpc.Time{}
			}
			if err := m.DeletedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsrmanEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Project) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUsrmanEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Project: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Project: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsrmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsrmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			m.CreatedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsrmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedBy |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			m.TeamID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsrmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorID", wireType)
			}
			m.CreatorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsrmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsrmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &timerpc.Time{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsrmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &timerpc.Time{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUsrmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedAt == nil {
				m.DeletedAt = &timerpc.Time{}
			}
			if err := m.DeletedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUsrmanEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUsrmanEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUsrmanEntity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUsrmanEntity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsrmanEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUsrmanEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUsrmanEntity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUsrmanEntity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUsrmanEntity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUsrmanEntity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUsrmanEntity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUsrmanEntity = fmt.Errorf("proto: unexpected end of group")
)
