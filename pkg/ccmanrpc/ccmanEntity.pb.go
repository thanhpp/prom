// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/thanhpp/prom/pkg/ccmanrpc/ccmanEntity.proto

package ccmanrpc

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	timerpc "github.com/thanhpp/prom/pkg/timerpc"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// card
type Card struct {
	ID          uint32        `protobuf:"varint,1,opt,name=ID,proto3" json:"id" gorm:"Column:id; Type:int; primaryKey; autoIncrement; index"`
	Title       string        `protobuf:"bytes,2,opt,name=Title,proto3" json:"title" gorm:"Column:title; Type:text"`
	Description string        `protobuf:"bytes,3,opt,name=Description,proto3" json:"description" gorm:"Column:description; Type:text"`
	ColumnID    uint32        `protobuf:"varint,4,opt,name=ColumnID,proto3" json:"column_id" gorm:"Column:column_id; Type:bigint; index:col_idx; index:col_idx_idx"`
	AssignedTo  uint32        `protobuf:"varint,5,opt,name=AssignedTo,proto3" json:"assigned_to" gorm:"Column:assigned_to; Type:bigint"`
	CreatedBy   uint32        `protobuf:"varint,6,opt,name=CreatedBy,proto3" json:"created_by" gorm:"Column:created_by; Type:bigint"`
	Index       uint32        `protobuf:"varint,7,opt,name=Index,proto3" json:"index" gorm:"Column:index; Type:int; index:col_idx_idx"`
	DueDate     *timerpc.Time `protobuf:"bytes,8,opt,name=DueDate,proto3" json:"due_date" gorm:"Column:due_date"`
	CreatedAt   *timerpc.Time `protobuf:"bytes,9,opt,name=CreatedAt,proto3" json:"created_at" gorm:"Column:created_at"`
	UpdatedAt   *timerpc.Time `protobuf:"bytes,10,opt,name=UpdatedAt,proto3" json:"updated_at" gorm:"Column:updated_at"`
	DeletedAt   *timerpc.Time `protobuf:"bytes,11,opt,name=DeletedAt,proto3" json:"deleted_at" gorm:"Column:deleted_at"`
}

func (m *Card) Reset()         { *m = Card{} }
func (m *Card) String() string { return proto.CompactTextString(m) }
func (*Card) ProtoMessage()    {}
func (*Card) Descriptor() ([]byte, []int) {
	return fileDescriptor_62618fad9f047c2a, []int{0}
}
func (m *Card) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Card) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Card.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Card) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Card.Merge(m, src)
}
func (m *Card) XXX_Size() int {
	return m.Size()
}
func (m *Card) XXX_DiscardUnknown() {
	xxx_messageInfo_Card.DiscardUnknown(m)
}

var xxx_messageInfo_Card proto.InternalMessageInfo

func (m *Card) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Card) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Card) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Card) GetColumnID() uint32 {
	if m != nil {
		return m.ColumnID
	}
	return 0
}

func (m *Card) GetAssignedTo() uint32 {
	if m != nil {
		return m.AssignedTo
	}
	return 0
}

func (m *Card) GetCreatedBy() uint32 {
	if m != nil {
		return m.CreatedBy
	}
	return 0
}

func (m *Card) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Card) GetDueDate() *timerpc.Time {
	if m != nil {
		return m.DueDate
	}
	return nil
}

func (m *Card) GetCreatedAt() *timerpc.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Card) GetUpdatedAt() *timerpc.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Card) GetDeletedAt() *timerpc.Time {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

// column
type Column struct {
	ID        uint32        `protobuf:"varint,1,opt,name=ID,proto3" json:"id" gorm:"Column:id; Type:int; primaryKey; autoIncrement; index"`
	Title     string        `protobuf:"bytes,2,opt,name=Title,proto3" json:"title" gorm:"Column:title; Type:text"`
	ProjectID uint32        `protobuf:"varint,3,opt,name=ProjectID,proto3" json:"project_id" gorm:"Column:project_id; Type:bigint"`
	Cards     []*Card       `protobuf:"bytes,4,rep,name=Cards,proto3" json:"cards" gorm:"foreignKey:ColumnID; constraint:OnUpdate:CASCADE,OnDelete:CASCADE"`
	CreatedBy uint32        `protobuf:"varint,5,opt,name=CreatedBy,proto3" json:"created_by" gorm:"Column:created_by; Type:bigint"`
	Index     string        `protobuf:"bytes,6,opt,name=Index,proto3" json:"index" gorm:"Column:index; Type:text"`
	MaxIndex  uint32        `protobuf:"varint,7,opt,name=MaxIndex,proto3" json:"maxIndex" gorm:"Column:max_index; Type:int; Default:0"`
	CreatedAt *timerpc.Time `protobuf:"bytes,8,opt,name=CreatedAt,proto3" json:"createdAt" gorm:"Column:created_at"`
	UpdatedAt *timerpc.Time `protobuf:"bytes,9,opt,name=UpdatedAt,proto3" json:"updatedAt" gorm:"Column:updated_at"`
	DeletedAt *timerpc.Time `protobuf:"bytes,10,opt,name=DeletedAt,proto3" json:"deletedAt" gorm:"Column:deleted_at"`
}

func (m *Column) Reset()         { *m = Column{} }
func (m *Column) String() string { return proto.CompactTextString(m) }
func (*Column) ProtoMessage()    {}
func (*Column) Descriptor() ([]byte, []int) {
	return fileDescriptor_62618fad9f047c2a, []int{1}
}
func (m *Column) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Column) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Column.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Column) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Column.Merge(m, src)
}
func (m *Column) XXX_Size() int {
	return m.Size()
}
func (m *Column) XXX_DiscardUnknown() {
	xxx_messageInfo_Column.DiscardUnknown(m)
}

var xxx_messageInfo_Column proto.InternalMessageInfo

func (m *Column) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Column) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Column) GetProjectID() uint32 {
	if m != nil {
		return m.ProjectID
	}
	return 0
}

func (m *Column) GetCards() []*Card {
	if m != nil {
		return m.Cards
	}
	return nil
}

func (m *Column) GetCreatedBy() uint32 {
	if m != nil {
		return m.CreatedBy
	}
	return 0
}

func (m *Column) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Column) GetMaxIndex() uint32 {
	if m != nil {
		return m.MaxIndex
	}
	return 0
}

func (m *Column) GetCreatedAt() *timerpc.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Column) GetUpdatedAt() *timerpc.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *Column) GetDeletedAt() *timerpc.Time {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func init() {
	proto.RegisterType((*Card)(nil), "ccmanrpc.Card")
	proto.RegisterType((*Column)(nil), "ccmanrpc.Column")
}

func init() {
	proto.RegisterFile("github.com/thanhpp/prom/pkg/ccmanrpc/ccmanEntity.proto", fileDescriptor_62618fad9f047c2a)
}

var fileDescriptor_62618fad9f047c2a = []byte{
	// 824 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0xbf, 0x6e, 0xfb, 0x54,
	0x14, 0xc7, 0xe3, 0xb4, 0x49, 0x93, 0x1b, 0x95, 0xc1, 0x03, 0xb2, 0x3a, 0xd8, 0x96, 0x55, 0xaa,
	0x00, 0x25, 0xa9, 0x8a, 0x04, 0x22, 0x29, 0x43, 0x12, 0xb7, 0x22, 0xaa, 0x50, 0x91, 0x9b, 0xa4,
	0x94, 0x25, 0x72, 0xec, 0x5b, 0xf7, 0x42, 0xfc, 0x47, 0xce, 0xb5, 0x94, 0x88, 0x97, 0xe0, 0x31,
	0x78, 0x04, 0x46, 0x46, 0xc6, 0x0e, 0x0c, 0x4c, 0x56, 0x9b, 0x6e, 0x99, 0x90, 0x59, 0x18, 0xd1,
	0xbd, 0xd7, 0x8e, 0xed, 0x92, 0xa0, 0x0c, 0x0c, 0xbf, 0xa1, 0xaa, 0x7d, 0xbe, 0xc7, 0x9f, 0x93,
	0x73, 0x7c, 0xbe, 0x37, 0x01, 0x9f, 0x59, 0x08, 0x3f, 0x06, 0x93, 0x86, 0xe1, 0xda, 0x4d, 0xfc,
	0xa8, 0x3b, 0x8f, 0x9e, 0xd7, 0xf4, 0x7c, 0xd7, 0x6e, 0x7a, 0x3f, 0x58, 0x4d, 0xc3, 0xb0, 0x75,
	0xc7, 0xf7, 0x0c, 0x76, 0x71, 0xe9, 0x60, 0x84, 0x17, 0x0d, 0xcf, 0x77, 0xb1, 0xcb, 0x57, 0x12,
	0xed, 0xe8, 0x93, 0x0c, 0xc1, 0x72, 0x2d, 0xb7, 0x49, 0x13, 0x26, 0xc1, 0x03, 0xbd, 0xa3, 0x37,
	0xf4, 0x8a, 0x3d, 0x78, 0xd4, 0xf8, 0xaf, 0x82, 0x18, 0xd9, 0x90, 0xd4, 0x23, 0xff, 0x59, 0xbe,
	0xf2, 0xfb, 0x01, 0xd8, 0xef, 0xe9, 0xbe, 0xc9, 0x8f, 0x40, 0xb1, 0xaf, 0x0a, 0x9c, 0xcc, 0xd5,
	0x0f, 0xbb, 0x57, 0xab, 0x50, 0x2a, 0x22, 0x33, 0x0a, 0xa5, 0x0b, 0xcb, 0xf5, 0xed, 0x96, 0xd2,
	0x73, 0xa7, 0x81, 0xed, 0xb4, 0x90, 0xd9, 0x96, 0x07, 0x0b, 0x0f, 0xb6, 0x90, 0x83, 0xdb, 0xb2,
	0xe7, 0x23, 0x5b, 0xf7, 0x17, 0xd7, 0x70, 0xd1, 0x96, 0xf5, 0x00, 0xbb, 0x7d, 0xc7, 0xf0, 0xa1,
	0x0d, 0x89, 0x84, 0x1c, 0x13, 0xce, 0x15, 0xad, 0xd8, 0x57, 0xf9, 0x0e, 0x28, 0x0d, 0x10, 0x9e,
	0x42, 0xa1, 0x28, 0x73, 0xf5, 0x6a, 0xf7, 0xe3, 0x55, 0x28, 0x95, 0x30, 0x09, 0x44, 0xa1, 0x24,
	0xe6, 0xe8, 0x34, 0x1a, 0x17, 0xc0, 0x70, 0x8e, 0x15, 0x8d, 0x3d, 0xc9, 0xdf, 0x83, 0x9a, 0x0a,
	0x67, 0x86, 0x8f, 0x3c, 0x8c, 0x5c, 0x47, 0xd8, 0xa3, 0xa0, 0xcf, 0x57, 0xa1, 0x54, 0x33, 0xd3,
	0x70, 0x14, 0x4a, 0xc7, 0x39, 0x5c, 0x46, 0xcb, 0x41, 0xb3, 0x2c, 0x7e, 0x06, 0x2a, 0x2c, 0xbd,
	0xaf, 0x0a, 0xfb, 0xb4, 0xf7, 0xbb, 0x55, 0x28, 0x55, 0x0d, 0x1a, 0x1b, 0xd3, 0x11, 0x5c, 0xe5,
	0xa8, 0x6b, 0x25, 0x66, 0x4e, 0x90, 0x85, 0xd6, 0x1d, 0x13, 0x75, 0x8c, 0xcc, 0xf9, 0x9b, 0x5b,
	0xf2, 0xa7, 0x68, 0xeb, 0x42, 0xfc, 0x3d, 0x00, 0x9d, 0xd9, 0x0c, 0x59, 0x0e, 0x34, 0x07, 0xae,
	0x50, 0xa2, 0x65, 0xbf, 0x20, 0xed, 0xe8, 0x71, 0x74, 0x8c, 0xdd, 0x28, 0x94, 0x4e, 0x72, 0x85,
	0x33, 0x5a, 0xae, 0xb4, 0xa2, 0x65, 0x60, 0xfc, 0x10, 0x54, 0x7b, 0x3e, 0xd4, 0x31, 0x34, 0xbb,
	0x0b, 0xa1, 0x4c, 0xc9, 0x64, 0x50, 0xc0, 0x60, 0xc1, 0xf1, 0x64, 0x11, 0x85, 0xd2, 0x07, 0xf9,
	0x8e, 0xd6, 0xd2, 0x1b, 0x6e, 0x4a, 0xe2, 0x6f, 0x41, 0xa9, 0x4f, 0x3a, 0x12, 0x0e, 0x28, 0xf2,
	0x4b, 0xf2, 0x12, 0x69, 0x8b, 0x51, 0x28, 0x9d, 0xe5, 0x57, 0x84, 0x44, 0xb3, 0x5b, 0xb2, 0x61,
	0x12, 0x8c, 0xc5, 0xdf, 0x80, 0x03, 0x35, 0x80, 0xaa, 0x8e, 0xa1, 0x50, 0x91, 0xb9, 0x7a, 0xed,
	0xfc, 0xb0, 0x11, 0x2f, 0x68, 0x63, 0x80, 0x6c, 0xd8, 0x3d, 0x59, 0x85, 0x52, 0xc5, 0x0c, 0xe0,
	0xd8, 0xd4, 0x31, 0xd9, 0x96, 0xf7, 0xf3, 0xaf, 0x37, 0x16, 0x14, 0x2d, 0xa1, 0xf0, 0x77, 0xeb,
	0xe6, 0x3b, 0x58, 0xa8, 0x6e, 0x42, 0x7e, 0x94, 0x9d, 0x85, 0x8e, 0xa3, 0x50, 0x12, 0x36, 0xce,
	0x42, 0xcf, 0xb4, 0xdf, 0xc1, 0x04, 0x3c, 0xf4, 0xcc, 0x18, 0x0c, 0xb6, 0x82, 0x03, 0x96, 0xb3,
	0x09, 0x9c, 0x4a, 0x8a, 0x96, 0xb2, 0x08, 0x58, 0x85, 0x53, 0xc8, 0xc0, 0xb5, 0xad, 0x60, 0x93,
	0xe5, 0x6c, 0x02, 0xa7, 0x92, 0xa2, 0xa5, 0x2c, 0xe5, 0xaf, 0x32, 0x28, 0xb3, 0x8c, 0x77, 0xd9,
	0xd8, 0x43, 0x50, 0xfd, 0xc6, 0x77, 0xbf, 0x87, 0x06, 0xee, 0xab, 0xd4, 0xd6, 0xf1, 0xb6, 0x7a,
	0x2c, 0xc8, 0xfc, 0x97, 0xdf, 0xd6, 0x54, 0x7a, 0xbb, 0xad, 0x6b, 0x12, 0xff, 0x23, 0x28, 0x91,
	0x23, 0x6d, 0x26, 0xec, 0xcb, 0x7b, 0xf5, 0xda, 0xf9, 0x7b, 0x8d, 0xe4, 0x30, 0x6d, 0x90, 0x70,
	0x77, 0x48, 0x3e, 0xa9, 0x41, 0x12, 0xa2, 0x50, 0xfa, 0x8a, 0xd1, 0x1f, 0x5c, 0x1f, 0x22, 0xcb,
	0xb9, 0x86, 0x8b, 0x56, 0x62, 0xd3, 0xb6, 0x6c, 0xb8, 0xce, 0x0c, 0xfb, 0x3a, 0x72, 0x70, 0xeb,
	0xc6, 0x61, 0x2f, 0xad, 0xd5, 0xeb, 0xdc, 0xf6, 0x3a, 0xea, 0xe5, 0xe9, 0x8d, 0xc3, 0x86, 0x9d,
	0x04, 0x14, 0x8d, 0xd5, 0xcc, 0x3b, 0xb0, 0xf4, 0xbf, 0x39, 0xb0, 0x93, 0x38, 0xb0, 0x9c, 0x4e,
	0x3b, 0x71, 0xa0, 0xb8, 0xd5, 0x81, 0xf1, 0xb4, 0x99, 0xdf, 0xbe, 0x05, 0x95, 0xaf, 0xf5, 0x79,
	0xd6, 0xc7, 0x17, 0xc4, 0x61, 0x76, 0x1c, 0x8b, 0x42, 0xe9, 0x34, 0x07, 0xb2, 0xf5, 0xf9, 0xf8,
	0x5f, 0x76, 0x56, 0xe1, 0x83, 0x1e, 0x4c, 0x71, 0xeb, 0x4c, 0xd1, 0xd6, 0x34, 0x7e, 0x94, 0x35,
	0xde, 0x46, 0x2f, 0x7f, 0x48, 0x4f, 0xd5, 0x24, 0x67, 0x57, 0xdf, 0x8d, 0xb2, 0xbe, 0xab, 0x6e,
	0xe5, 0x06, 0x49, 0xce, 0xae, 0xb6, 0x1b, 0x65, 0x6d, 0x07, 0xb6, 0x72, 0xcd, 0x24, 0x67, 0x47,
	0xd7, 0x75, 0x47, 0xcf, 0x2f, 0x22, 0xf7, 0xe7, 0x8b, 0xc8, 0xfd, 0xfd, 0x22, 0x72, 0x3f, 0x2f,
	0x45, 0xee, 0x97, 0xa5, 0xc8, 0xfd, 0xba, 0x14, 0x0b, 0xbf, 0x2d, 0x45, 0xee, 0x69, 0x29, 0x72,
	0xcf, 0x4b, 0x91, 0xfb, 0xe9, 0x55, 0x2c, 0x3c, 0xbd, 0x8a, 0x85, 0x3f, 0x5e, 0xc5, 0xc2, 0x77,
	0xc7, 0xbb, 0xfc, 0x3e, 0x98, 0x94, 0xe9, 0x77, 0xf5, 0xa7, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x7d, 0x55, 0xc1, 0x19, 0x4e, 0x08, 0x00, 0x00,
}

func (this *Card) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Card)
	if !ok {
		that2, ok := that.(Card)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Card")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Card but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Card but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.Title != that1.Title {
		return fmt.Errorf("Title this(%v) Not Equal that(%v)", this.Title, that1.Title)
	}
	if this.Description != that1.Description {
		return fmt.Errorf("Description this(%v) Not Equal that(%v)", this.Description, that1.Description)
	}
	if this.ColumnID != that1.ColumnID {
		return fmt.Errorf("ColumnID this(%v) Not Equal that(%v)", this.ColumnID, that1.ColumnID)
	}
	if this.AssignedTo != that1.AssignedTo {
		return fmt.Errorf("AssignedTo this(%v) Not Equal that(%v)", this.AssignedTo, that1.AssignedTo)
	}
	if this.CreatedBy != that1.CreatedBy {
		return fmt.Errorf("CreatedBy this(%v) Not Equal that(%v)", this.CreatedBy, that1.CreatedBy)
	}
	if this.Index != that1.Index {
		return fmt.Errorf("Index this(%v) Not Equal that(%v)", this.Index, that1.Index)
	}
	if !this.DueDate.Equal(that1.DueDate) {
		return fmt.Errorf("DueDate this(%v) Not Equal that(%v)", this.DueDate, that1.DueDate)
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	if !this.DeletedAt.Equal(that1.DeletedAt) {
		return fmt.Errorf("DeletedAt this(%v) Not Equal that(%v)", this.DeletedAt, that1.DeletedAt)
	}
	return nil
}
func (this *Card) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Card)
	if !ok {
		that2, ok := that.(Card)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.ColumnID != that1.ColumnID {
		return false
	}
	if this.AssignedTo != that1.AssignedTo {
		return false
	}
	if this.CreatedBy != that1.CreatedBy {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if !this.DueDate.Equal(that1.DueDate) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !this.DeletedAt.Equal(that1.DeletedAt) {
		return false
	}
	return true
}
func (this *Column) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Column)
	if !ok {
		that2, ok := that.(Column)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Column")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Column but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Column but is not nil && this == nil")
	}
	if this.ID != that1.ID {
		return fmt.Errorf("ID this(%v) Not Equal that(%v)", this.ID, that1.ID)
	}
	if this.Title != that1.Title {
		return fmt.Errorf("Title this(%v) Not Equal that(%v)", this.Title, that1.Title)
	}
	if this.ProjectID != that1.ProjectID {
		return fmt.Errorf("ProjectID this(%v) Not Equal that(%v)", this.ProjectID, that1.ProjectID)
	}
	if len(this.Cards) != len(that1.Cards) {
		return fmt.Errorf("Cards this(%v) Not Equal that(%v)", len(this.Cards), len(that1.Cards))
	}
	for i := range this.Cards {
		if !this.Cards[i].Equal(that1.Cards[i]) {
			return fmt.Errorf("Cards this[%v](%v) Not Equal that[%v](%v)", i, this.Cards[i], i, that1.Cards[i])
		}
	}
	if this.CreatedBy != that1.CreatedBy {
		return fmt.Errorf("CreatedBy this(%v) Not Equal that(%v)", this.CreatedBy, that1.CreatedBy)
	}
	if this.Index != that1.Index {
		return fmt.Errorf("Index this(%v) Not Equal that(%v)", this.Index, that1.Index)
	}
	if this.MaxIndex != that1.MaxIndex {
		return fmt.Errorf("MaxIndex this(%v) Not Equal that(%v)", this.MaxIndex, that1.MaxIndex)
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	if !this.DeletedAt.Equal(that1.DeletedAt) {
		return fmt.Errorf("DeletedAt this(%v) Not Equal that(%v)", this.DeletedAt, that1.DeletedAt)
	}
	return nil
}
func (this *Column) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Column)
	if !ok {
		that2, ok := that.(Column)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.ProjectID != that1.ProjectID {
		return false
	}
	if len(this.Cards) != len(that1.Cards) {
		return false
	}
	for i := range this.Cards {
		if !this.Cards[i].Equal(that1.Cards[i]) {
			return false
		}
	}
	if this.CreatedBy != that1.CreatedBy {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.MaxIndex != that1.MaxIndex {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if !this.DeletedAt.Equal(that1.DeletedAt) {
		return false
	}
	return true
}
func (this *Card) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&ccmanrpc.Card{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "ColumnID: "+fmt.Sprintf("%#v", this.ColumnID)+",\n")
	s = append(s, "AssignedTo: "+fmt.Sprintf("%#v", this.AssignedTo)+",\n")
	s = append(s, "CreatedBy: "+fmt.Sprintf("%#v", this.CreatedBy)+",\n")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	if this.DueDate != nil {
		s = append(s, "DueDate: "+fmt.Sprintf("%#v", this.DueDate)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.DeletedAt != nil {
		s = append(s, "DeletedAt: "+fmt.Sprintf("%#v", this.DeletedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Column) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&ccmanrpc.Column{")
	s = append(s, "ID: "+fmt.Sprintf("%#v", this.ID)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "ProjectID: "+fmt.Sprintf("%#v", this.ProjectID)+",\n")
	if this.Cards != nil {
		s = append(s, "Cards: "+fmt.Sprintf("%#v", this.Cards)+",\n")
	}
	s = append(s, "CreatedBy: "+fmt.Sprintf("%#v", this.CreatedBy)+",\n")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "MaxIndex: "+fmt.Sprintf("%#v", this.MaxIndex)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.DeletedAt != nil {
		s = append(s, "DeletedAt: "+fmt.Sprintf("%#v", this.DeletedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCcmanEntity(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Card) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Card) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Card) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeletedAt != nil {
		{
			size, err := m.DeletedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCcmanEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCcmanEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCcmanEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.DueDate != nil {
		{
			size, err := m.DueDate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCcmanEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Index != 0 {
		i = encodeVarintCcmanEntity(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x38
	}
	if m.CreatedBy != 0 {
		i = encodeVarintCcmanEntity(dAtA, i, uint64(m.CreatedBy))
		i--
		dAtA[i] = 0x30
	}
	if m.AssignedTo != 0 {
		i = encodeVarintCcmanEntity(dAtA, i, uint64(m.AssignedTo))
		i--
		dAtA[i] = 0x28
	}
	if m.ColumnID != 0 {
		i = encodeVarintCcmanEntity(dAtA, i, uint64(m.ColumnID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCcmanEntity(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCcmanEntity(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintCcmanEntity(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Column) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Column) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Column) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeletedAt != nil {
		{
			size, err := m.DeletedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCcmanEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCcmanEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCcmanEntity(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.MaxIndex != 0 {
		i = encodeVarintCcmanEntity(dAtA, i, uint64(m.MaxIndex))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintCcmanEntity(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x32
	}
	if m.CreatedBy != 0 {
		i = encodeVarintCcmanEntity(dAtA, i, uint64(m.CreatedBy))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Cards) > 0 {
		for iNdEx := len(m.Cards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCcmanEntity(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ProjectID != 0 {
		i = encodeVarintCcmanEntity(dAtA, i, uint64(m.ProjectID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCcmanEntity(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintCcmanEntity(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCcmanEntity(dAtA []byte, offset int, v uint64) int {
	offset -= sovCcmanEntity(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedCard(r randyCcmanEntity, easy bool) *Card {
	this := &Card{}
	this.ID = uint32(r.Uint32())
	this.Title = string(randStringCcmanEntity(r))
	this.Description = string(randStringCcmanEntity(r))
	this.ColumnID = uint32(r.Uint32())
	this.AssignedTo = uint32(r.Uint32())
	this.CreatedBy = uint32(r.Uint32())
	this.Index = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		this.DueDate = timerpc.NewPopulatedTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.CreatedAt = timerpc.NewPopulatedTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.UpdatedAt = timerpc.NewPopulatedTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.DeletedAt = timerpc.NewPopulatedTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedColumn(r randyCcmanEntity, easy bool) *Column {
	this := &Column{}
	this.ID = uint32(r.Uint32())
	this.Title = string(randStringCcmanEntity(r))
	this.ProjectID = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.Cards = make([]*Card, v1)
		for i := 0; i < v1; i++ {
			this.Cards[i] = NewPopulatedCard(r, easy)
		}
	}
	this.CreatedBy = uint32(r.Uint32())
	this.Index = string(randStringCcmanEntity(r))
	this.MaxIndex = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		this.CreatedAt = timerpc.NewPopulatedTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.UpdatedAt = timerpc.NewPopulatedTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.DeletedAt = timerpc.NewPopulatedTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyCcmanEntity interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneCcmanEntity(r randyCcmanEntity) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringCcmanEntity(r randyCcmanEntity) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneCcmanEntity(r)
	}
	return string(tmps)
}
func randUnrecognizedCcmanEntity(r randyCcmanEntity, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldCcmanEntity(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldCcmanEntity(dAtA []byte, r randyCcmanEntity, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateCcmanEntity(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateCcmanEntity(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateCcmanEntity(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateCcmanEntity(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateCcmanEntity(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateCcmanEntity(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateCcmanEntity(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Card) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovCcmanEntity(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCcmanEntity(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCcmanEntity(uint64(l))
	}
	if m.ColumnID != 0 {
		n += 1 + sovCcmanEntity(uint64(m.ColumnID))
	}
	if m.AssignedTo != 0 {
		n += 1 + sovCcmanEntity(uint64(m.AssignedTo))
	}
	if m.CreatedBy != 0 {
		n += 1 + sovCcmanEntity(uint64(m.CreatedBy))
	}
	if m.Index != 0 {
		n += 1 + sovCcmanEntity(uint64(m.Index))
	}
	if m.DueDate != nil {
		l = m.DueDate.Size()
		n += 1 + l + sovCcmanEntity(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovCcmanEntity(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovCcmanEntity(uint64(l))
	}
	if m.DeletedAt != nil {
		l = m.DeletedAt.Size()
		n += 1 + l + sovCcmanEntity(uint64(l))
	}
	return n
}

func (m *Column) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovCcmanEntity(uint64(m.ID))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCcmanEntity(uint64(l))
	}
	if m.ProjectID != 0 {
		n += 1 + sovCcmanEntity(uint64(m.ProjectID))
	}
	if len(m.Cards) > 0 {
		for _, e := range m.Cards {
			l = e.Size()
			n += 1 + l + sovCcmanEntity(uint64(l))
		}
	}
	if m.CreatedBy != 0 {
		n += 1 + sovCcmanEntity(uint64(m.CreatedBy))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovCcmanEntity(uint64(l))
	}
	if m.MaxIndex != 0 {
		n += 1 + sovCcmanEntity(uint64(m.MaxIndex))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovCcmanEntity(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovCcmanEntity(uint64(l))
	}
	if m.DeletedAt != nil {
		l = m.DeletedAt.Size()
		n += 1 + l + sovCcmanEntity(uint64(l))
	}
	return n
}

func sovCcmanEntity(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCcmanEntity(x uint64) (n int) {
	return sovCcmanEntity(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Card) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCcmanEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Card: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Card: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCcmanEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCcmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCcmanEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCcmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnID", wireType)
			}
			m.ColumnID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignedTo", wireType)
			}
			m.AssignedTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssignedTo |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			m.CreatedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedBy |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DueDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcmanEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DueDate == nil {
				m.DueDate = &timerpc.Time{}
			}
			if err := m.DueDate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcmanEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &timerpc.Time{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcmanEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &timerpc.Time{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcmanEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedAt == nil {
				m.DeletedAt = &timerpc.Time{}
			}
			if err := m.DeletedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCcmanEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCcmanEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Column) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCcmanEntity
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Column: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Column: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCcmanEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCcmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectID", wireType)
			}
			m.ProjectID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProjectID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcmanEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cards = append(m.Cards, &Card{})
			if err := m.Cards[len(m.Cards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedBy", wireType)
			}
			m.CreatedBy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedBy |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCcmanEntity
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCcmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxIndex", wireType)
			}
			m.MaxIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcmanEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &timerpc.Time{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcmanEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &timerpc.Time{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCcmanEntity
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCcmanEntity
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCcmanEntity
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedAt == nil {
				m.DeletedAt = &timerpc.Time{}
			}
			if err := m.DeletedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCcmanEntity(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCcmanEntity
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCcmanEntity(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCcmanEntity
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCcmanEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCcmanEntity
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCcmanEntity
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCcmanEntity
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCcmanEntity
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCcmanEntity        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCcmanEntity          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCcmanEntity = fmt.Errorf("proto: unexpected end of group")
)
